---
title: "Probability with R - Exercise 1.1"
author: "Lucas Liona"
format:
  pdf:
    toc: true
    fig-width: 8
    fig-height: 6
  html:
    toc: true
    code-fold: show
    fig-width: 8
    fig-height: 6
execute:
  echo: true
---

## Problem

In a class of 50 students of computing, 23 are female and 27 are male. The
results of their first year Java programming examination are as follows:

Females: 57, 59, 78, 79, 60, 65, 68, 71, 75, 48, 51, 55, 56, 41, 43, 44, 75, 78,
80, 81, 83, 83, 85
Males: 48, 49, 49, 30, 30, 31, 32, 35, 37, 41, 86, 42, 51, 53, 56, 42, 44, 50,
51, 65, 67, 51, 56, 58, 64, 64, 75
(a) Read these data into R by storing them in the following ways:

As two vectors, one for the females and one for the males.
As one vector, with a factor vector designating the gender.

(b) If it was discovered that the 34th was entered incorrectly and should have
obtained the marks 46 instead of 86, use an appropriate editing procedure
to change this.
(c) Save the workspace in a suitable directory for access later.

Part (a): Reading Data into R
First, we'll read the data into R using the two approaches mentioned in the problem.

# Approach 1: Two Separate Vectors

```{r}
# Create separate vectors for female and male scores
females <- c(57, 59, 78, 79, 60, 65, 68, 71, 75, 48, 51, 55, 56, 41, 43, 44, 75, 78, 80, 81, 83, 83, 85)
males <- c(48, 49, 49, 30, 30, 31, 32, 35, 37, 41, 86, 42, 51, 53, 56, 42, 44, 50, 51, 65, 67, 51, 56, 58, 64, 64, 75)

# Verify the length of each vector
cat("Number of female scores:", length(females), "\n")
cat("Number of male scores:", length(males), "\n")
```

# Approach 2: Single Vector with Factor

```{r}
# Create a single vector with all scores
marks <- c(57, 59, 78, 79, 60, 65, 68, 71, 75, 48, 51, 55, 56, 41, 43, 44, 75, 78, 
           80, 81, 83, 83, 85, 48, 49, 49, 30, 30, 31, 32, 35, 37, 41, 86, 42, 51, 
           53, 56, 42, 44, 50, 51, 65, 67, 51, 56, 58, 64, 64, 75)

# Create a factor for gender
gender <- rep(c("Female", "Male"), c(23, 27))

# Create a data frame for easier manipulation
student_data <- data.frame(marks = marks, gender = gender)

# Display the first few rows of the data frame
head(student_data)
```

# Part (b): Correcting Data Entry Error

```{r}
# Check the value before correction
cat("Value before correction (marks[34]):", marks[34], "\n")
cat("Value before correction (student_data$marks[34]):", student_data$marks[34], "\n")
cat("Value before correction in males vector (males[11]):", males[11], "\n")

# Make the corrections
marks[34] <- 46
student_data$marks[34] <- 46
males[11] <- 46  # This is the 11th element in males vector

# Verify the changes
cat("Value after correction (marks[34]):", marks[34], "\n")
cat("Value after correction (student_data$marks[34]):", student_data$marks[34], "\n")
cat("Value after correction in males vector (males[11]):", males[11], "\n")

# Show the specific row in the data frame
student_data[34,]
```

# Part (c): Saving the Workspace

```{r}
# Save all objects in the current session
save.image("class_marks.RData")

# Alternatively, save specific objects
save(females, males, marks, gender, student_data, file = "class_marks.RData")
```

# Additional Analysis

### Summary Stats

```{r}
# Summary statistics for female scores
cat("Female summary statistics:\n")
summary(females)

# Summary statistics for male scores
cat("\nMale summary statistics:\n")
summary(males)

# Create a comparison table
stats_comparison <- data.frame(
  Gender = c("Female", "Male"),
  Min = c(min(females), min(males)),
  Mean = c(mean(females), mean(males)),
  Median = c(median(females), median(males)),
  Max = c(max(females), max(males))
)

# Display the comparison table
knitr::kable(stats_comparison, digits = 2, caption = "Comparison of Exam Scores by Gender")
```

# Visualization 

```{r}
# Set margins for the plot
par(mar = c(4, 4, 2, 1))  # Bottom, left, top, right margins

# Create the boxplot
boxplot(marks ~ gender, data = student_data, 
        main = "Java Programming Exam Scores by Gender",
        xlab = "Gender", ylab = "Score",
        col = c("lightpink", "lightblue"))

# Add mean points to the boxplot
points(1, mean(females), pch = 18, col = "red", cex = 2)
points(2, mean(males), pch = 18, col = "blue", cex = 2)

# Add a legend
legend("topright", legend = "Mean Score", pch = 18, col = "black")
```

# Conclusion
From our analysis, we can observe that female students (mean = r round(mean(females), 2)) performed better on average than male students (mean = r round(mean(males), 2)) in this Java programming examination. The boxplot shows not only the difference in central tendency but also the spread of scores within each group.


